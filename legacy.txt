def api_version
  @api_version ||= self.class.name.scan(/\d+$/).first
end

def api_path(path)
  path = "/#{path}" unless path[0] == '/'
  "/api/v#{api_version}#{path}"
end



class DomainSection

  attr_reader :variants
  def initialize(url)
    @segments = url.gsub(/https?:\/\//, '').split('.')
    @components = compose
    @variants = @components.map {|component| component.join('.')}
  end

  def compose
    segments = @segments.dup
    components = [segments.slice!(-2..-1)]
    until segments.empty?
      components << components.last.dup.unshift(segments.pop)
    end
    components
  end
end



require 'domain_section'

describe DomainSection do
  it "handles bare domains" do
    DomainSection.new('example.org').variants.should eq(['example.org'])
  end

  it "strips off http://" do
    DomainSection.new('http://example.org').variants.should eq(['example.org'])
  end

  it "strips off https://" do
    DomainSection.new('https://example.org').variants.should eq(['example.org'])
  end

  it "handles sub domain" do
    DomainSection.new('www.example.org').variants.should eq(['example.org', 'www.example.org'])
  end

  it "handles bare domains with many segments" do
    DomainSection.new('foo.bar.baz.example.org').variants.should eq(['example.org', 'baz.example.org', 'bar.baz.example.org', 'foo.bar.baz.example.org'])
  end
end

